# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import management_pb2 as management__pb2


class AccessContextStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetContexts = channel.unary_stream(
                '/grpc.AccessContext/GetContexts',
                request_serializer=management__pb2.GetContextsRequest.SerializeToString,
                response_deserializer=management__pb2.JanusGraphContext.FromString,
                )
        self.GetContextByGraphName = channel.unary_unary(
                '/grpc.AccessContext/GetContextByGraphName',
                request_serializer=management__pb2.GetContextByGraphNameRequest.SerializeToString,
                response_deserializer=management__pb2.JanusGraphContext.FromString,
                )


class AccessContextServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetContexts(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContextByGraphName(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccessContextServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetContexts': grpc.unary_stream_rpc_method_handler(
                    servicer.GetContexts,
                    request_deserializer=management__pb2.GetContextsRequest.FromString,
                    response_serializer=management__pb2.JanusGraphContext.SerializeToString,
            ),
            'GetContextByGraphName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContextByGraphName,
                    request_deserializer=management__pb2.GetContextByGraphNameRequest.FromString,
                    response_serializer=management__pb2.JanusGraphContext.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.AccessContext', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccessContext(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetContexts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.AccessContext/GetContexts',
            management__pb2.GetContextsRequest.SerializeToString,
            management__pb2.JanusGraphContext.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContextByGraphName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.AccessContext/GetContextByGraphName',
            management__pb2.GetContextByGraphNameRequest.SerializeToString,
            management__pb2.JanusGraphContext.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class ManagementForEdgeLabelsStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEdgeLabels = channel.unary_stream(
                '/grpc.ManagementForEdgeLabels/GetEdgeLabels',
                request_serializer=management__pb2.GetEdgeLabelsRequest.SerializeToString,
                response_deserializer=management__pb2.EdgeLabel.FromString,
                )
        self.GetEdgeLabelsByName = channel.unary_stream(
                '/grpc.ManagementForEdgeLabels/GetEdgeLabelsByName',
                request_serializer=management__pb2.GetEdgeLabelsByNameRequest.SerializeToString,
                response_deserializer=management__pb2.EdgeLabel.FromString,
                )
        self.EnsureEdgeLabel = channel.unary_unary(
                '/grpc.ManagementForEdgeLabels/EnsureEdgeLabel',
                request_serializer=management__pb2.EnsureEdgeLabelRequest.SerializeToString,
                response_deserializer=management__pb2.EdgeLabel.FromString,
                )
        self.GetCompositeIndicesByEdgeLabel = channel.unary_stream(
                '/grpc.ManagementForEdgeLabels/GetCompositeIndicesByEdgeLabel',
                request_serializer=management__pb2.GetCompositeIndicesByEdgeLabelRequest.SerializeToString,
                response_deserializer=management__pb2.CompositeEdgeIndex.FromString,
                )
        self.EnsureCompositeIndexByEdgeLabel = channel.unary_unary(
                '/grpc.ManagementForEdgeLabels/EnsureCompositeIndexByEdgeLabel',
                request_serializer=management__pb2.EnsureCompositeIndexByEdgeLabelRequest.SerializeToString,
                response_deserializer=management__pb2.CompositeEdgeIndex.FromString,
                )
        self.GetCompositeIndicesForEdge = channel.unary_stream(
                '/grpc.ManagementForEdgeLabels/GetCompositeIndicesForEdge',
                request_serializer=management__pb2.GetCompositeIndicesForEdgeRequest.SerializeToString,
                response_deserializer=management__pb2.CompositeEdgeIndex.FromString,
                )
        self.GetMixedIndicesByEdgeLabel = channel.unary_stream(
                '/grpc.ManagementForEdgeLabels/GetMixedIndicesByEdgeLabel',
                request_serializer=management__pb2.GetMixedIndicesByEdgeLabelRequest.SerializeToString,
                response_deserializer=management__pb2.MixedEdgeIndex.FromString,
                )
        self.EnsureMixedIndexByEdgeLabel = channel.unary_unary(
                '/grpc.ManagementForEdgeLabels/EnsureMixedIndexByEdgeLabel',
                request_serializer=management__pb2.EnsureMixedIndexByEdgeLabelRequest.SerializeToString,
                response_deserializer=management__pb2.MixedEdgeIndex.FromString,
                )


class ManagementForEdgeLabelsServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetEdgeLabels(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEdgeLabelsByName(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureEdgeLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompositeIndicesByEdgeLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureCompositeIndexByEdgeLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompositeIndicesForEdge(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMixedIndicesByEdgeLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureMixedIndexByEdgeLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagementForEdgeLabelsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEdgeLabels': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEdgeLabels,
                    request_deserializer=management__pb2.GetEdgeLabelsRequest.FromString,
                    response_serializer=management__pb2.EdgeLabel.SerializeToString,
            ),
            'GetEdgeLabelsByName': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEdgeLabelsByName,
                    request_deserializer=management__pb2.GetEdgeLabelsByNameRequest.FromString,
                    response_serializer=management__pb2.EdgeLabel.SerializeToString,
            ),
            'EnsureEdgeLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureEdgeLabel,
                    request_deserializer=management__pb2.EnsureEdgeLabelRequest.FromString,
                    response_serializer=management__pb2.EdgeLabel.SerializeToString,
            ),
            'GetCompositeIndicesByEdgeLabel': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCompositeIndicesByEdgeLabel,
                    request_deserializer=management__pb2.GetCompositeIndicesByEdgeLabelRequest.FromString,
                    response_serializer=management__pb2.CompositeEdgeIndex.SerializeToString,
            ),
            'EnsureCompositeIndexByEdgeLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureCompositeIndexByEdgeLabel,
                    request_deserializer=management__pb2.EnsureCompositeIndexByEdgeLabelRequest.FromString,
                    response_serializer=management__pb2.CompositeEdgeIndex.SerializeToString,
            ),
            'GetCompositeIndicesForEdge': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCompositeIndicesForEdge,
                    request_deserializer=management__pb2.GetCompositeIndicesForEdgeRequest.FromString,
                    response_serializer=management__pb2.CompositeEdgeIndex.SerializeToString,
            ),
            'GetMixedIndicesByEdgeLabel': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMixedIndicesByEdgeLabel,
                    request_deserializer=management__pb2.GetMixedIndicesByEdgeLabelRequest.FromString,
                    response_serializer=management__pb2.MixedEdgeIndex.SerializeToString,
            ),
            'EnsureMixedIndexByEdgeLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureMixedIndexByEdgeLabel,
                    request_deserializer=management__pb2.EnsureMixedIndexByEdgeLabelRequest.FromString,
                    response_serializer=management__pb2.MixedEdgeIndex.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.ManagementForEdgeLabels', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagementForEdgeLabels(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetEdgeLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForEdgeLabels/GetEdgeLabels',
            management__pb2.GetEdgeLabelsRequest.SerializeToString,
            management__pb2.EdgeLabel.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEdgeLabelsByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForEdgeLabels/GetEdgeLabelsByName',
            management__pb2.GetEdgeLabelsByNameRequest.SerializeToString,
            management__pb2.EdgeLabel.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnsureEdgeLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ManagementForEdgeLabels/EnsureEdgeLabel',
            management__pb2.EnsureEdgeLabelRequest.SerializeToString,
            management__pb2.EdgeLabel.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompositeIndicesByEdgeLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForEdgeLabels/GetCompositeIndicesByEdgeLabel',
            management__pb2.GetCompositeIndicesByEdgeLabelRequest.SerializeToString,
            management__pb2.CompositeEdgeIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnsureCompositeIndexByEdgeLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ManagementForEdgeLabels/EnsureCompositeIndexByEdgeLabel',
            management__pb2.EnsureCompositeIndexByEdgeLabelRequest.SerializeToString,
            management__pb2.CompositeEdgeIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompositeIndicesForEdge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForEdgeLabels/GetCompositeIndicesForEdge',
            management__pb2.GetCompositeIndicesForEdgeRequest.SerializeToString,
            management__pb2.CompositeEdgeIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMixedIndicesByEdgeLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForEdgeLabels/GetMixedIndicesByEdgeLabel',
            management__pb2.GetMixedIndicesByEdgeLabelRequest.SerializeToString,
            management__pb2.MixedEdgeIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnsureMixedIndexByEdgeLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ManagementForEdgeLabels/EnsureMixedIndexByEdgeLabel',
            management__pb2.EnsureMixedIndexByEdgeLabelRequest.SerializeToString,
            management__pb2.MixedEdgeIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class ManagementForVertexLabelsStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVertexLabels = channel.unary_stream(
                '/grpc.ManagementForVertexLabels/GetVertexLabels',
                request_serializer=management__pb2.GetVertexLabelsRequest.SerializeToString,
                response_deserializer=management__pb2.VertexLabel.FromString,
                )
        self.GetVertexLabelsByName = channel.unary_stream(
                '/grpc.ManagementForVertexLabels/GetVertexLabelsByName',
                request_serializer=management__pb2.GetVertexLabelsByNameRequest.SerializeToString,
                response_deserializer=management__pb2.VertexLabel.FromString,
                )
        self.EnsureVertexLabel = channel.unary_unary(
                '/grpc.ManagementForVertexLabels/EnsureVertexLabel',
                request_serializer=management__pb2.EnsureVertexLabelRequest.SerializeToString,
                response_deserializer=management__pb2.VertexLabel.FromString,
                )
        self.GetCompositeIndicesByVertexLabel = channel.unary_stream(
                '/grpc.ManagementForVertexLabels/GetCompositeIndicesByVertexLabel',
                request_serializer=management__pb2.GetCompositeIndicesByVertexLabelRequest.SerializeToString,
                response_deserializer=management__pb2.CompositeVertexIndex.FromString,
                )
        self.EnsureCompositeIndexByVertexLabel = channel.unary_unary(
                '/grpc.ManagementForVertexLabels/EnsureCompositeIndexByVertexLabel',
                request_serializer=management__pb2.EnsureCompositeIndexByVertexLabelRequest.SerializeToString,
                response_deserializer=management__pb2.CompositeVertexIndex.FromString,
                )
        self.GetCompositeIndicesForVertex = channel.unary_stream(
                '/grpc.ManagementForVertexLabels/GetCompositeIndicesForVertex',
                request_serializer=management__pb2.GetCompositeIndicesForVertexRequest.SerializeToString,
                response_deserializer=management__pb2.CompositeVertexIndex.FromString,
                )
        self.GetMixedIndicesByVertexLabel = channel.unary_stream(
                '/grpc.ManagementForVertexLabels/GetMixedIndicesByVertexLabel',
                request_serializer=management__pb2.GetMixedIndicesByVertexLabelRequest.SerializeToString,
                response_deserializer=management__pb2.MixedVertexIndex.FromString,
                )
        self.EnsureMixedIndexByVertexLabel = channel.unary_unary(
                '/grpc.ManagementForVertexLabels/EnsureMixedIndexByVertexLabel',
                request_serializer=management__pb2.EnsureMixedIndexByVertexLabelRequest.SerializeToString,
                response_deserializer=management__pb2.MixedVertexIndex.FromString,
                )


class ManagementForVertexLabelsServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetVertexLabels(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVertexLabelsByName(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureVertexLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompositeIndicesByVertexLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureCompositeIndexByVertexLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompositeIndicesForVertex(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMixedIndicesByVertexLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnsureMixedIndexByVertexLabel(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagementForVertexLabelsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVertexLabels': grpc.unary_stream_rpc_method_handler(
                    servicer.GetVertexLabels,
                    request_deserializer=management__pb2.GetVertexLabelsRequest.FromString,
                    response_serializer=management__pb2.VertexLabel.SerializeToString,
            ),
            'GetVertexLabelsByName': grpc.unary_stream_rpc_method_handler(
                    servicer.GetVertexLabelsByName,
                    request_deserializer=management__pb2.GetVertexLabelsByNameRequest.FromString,
                    response_serializer=management__pb2.VertexLabel.SerializeToString,
            ),
            'EnsureVertexLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureVertexLabel,
                    request_deserializer=management__pb2.EnsureVertexLabelRequest.FromString,
                    response_serializer=management__pb2.VertexLabel.SerializeToString,
            ),
            'GetCompositeIndicesByVertexLabel': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCompositeIndicesByVertexLabel,
                    request_deserializer=management__pb2.GetCompositeIndicesByVertexLabelRequest.FromString,
                    response_serializer=management__pb2.CompositeVertexIndex.SerializeToString,
            ),
            'EnsureCompositeIndexByVertexLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureCompositeIndexByVertexLabel,
                    request_deserializer=management__pb2.EnsureCompositeIndexByVertexLabelRequest.FromString,
                    response_serializer=management__pb2.CompositeVertexIndex.SerializeToString,
            ),
            'GetCompositeIndicesForVertex': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCompositeIndicesForVertex,
                    request_deserializer=management__pb2.GetCompositeIndicesForVertexRequest.FromString,
                    response_serializer=management__pb2.CompositeVertexIndex.SerializeToString,
            ),
            'GetMixedIndicesByVertexLabel': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMixedIndicesByVertexLabel,
                    request_deserializer=management__pb2.GetMixedIndicesByVertexLabelRequest.FromString,
                    response_serializer=management__pb2.MixedVertexIndex.SerializeToString,
            ),
            'EnsureMixedIndexByVertexLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.EnsureMixedIndexByVertexLabel,
                    request_deserializer=management__pb2.EnsureMixedIndexByVertexLabelRequest.FromString,
                    response_serializer=management__pb2.MixedVertexIndex.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.ManagementForVertexLabels', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ManagementForVertexLabels(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetVertexLabels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForVertexLabels/GetVertexLabels',
            management__pb2.GetVertexLabelsRequest.SerializeToString,
            management__pb2.VertexLabel.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVertexLabelsByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForVertexLabels/GetVertexLabelsByName',
            management__pb2.GetVertexLabelsByNameRequest.SerializeToString,
            management__pb2.VertexLabel.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnsureVertexLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ManagementForVertexLabels/EnsureVertexLabel',
            management__pb2.EnsureVertexLabelRequest.SerializeToString,
            management__pb2.VertexLabel.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompositeIndicesByVertexLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForVertexLabels/GetCompositeIndicesByVertexLabel',
            management__pb2.GetCompositeIndicesByVertexLabelRequest.SerializeToString,
            management__pb2.CompositeVertexIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnsureCompositeIndexByVertexLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ManagementForVertexLabels/EnsureCompositeIndexByVertexLabel',
            management__pb2.EnsureCompositeIndexByVertexLabelRequest.SerializeToString,
            management__pb2.CompositeVertexIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompositeIndicesForVertex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForVertexLabels/GetCompositeIndicesForVertex',
            management__pb2.GetCompositeIndicesForVertexRequest.SerializeToString,
            management__pb2.CompositeVertexIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMixedIndicesByVertexLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ManagementForVertexLabels/GetMixedIndicesByVertexLabel',
            management__pb2.GetMixedIndicesByVertexLabelRequest.SerializeToString,
            management__pb2.MixedVertexIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnsureMixedIndexByVertexLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ManagementForVertexLabels/EnsureMixedIndexByVertexLabel',
            management__pb2.EnsureMixedIndexByVertexLabelRequest.SerializeToString,
            management__pb2.MixedVertexIndex.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
